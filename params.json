{"name":"Flurl","tagline":"A portable, fluent URL builder for .NET","body":"#Flurl\r\n\r\nFlurl is a tiny, portable, fluent library for building URLs. It is best explained with an example:\r\n\r\n````C#\r\nvar url = \"http://www.some-api.com\"\r\n\t.AppendPathSegment(\"endpoint\")\r\n\t.SetQueryParams(new {\r\n\t\tapi_key = ConfigurationManager.AppSettings[\"SomeApiKey\"],\r\n\t\tmax_results = 20,\r\n\t\tq = \"Don't worry, I'll get encoded!\"\r\n\t});\r\n````\r\n\r\nAt its core is the `Url` class, which is designed to work seamlessly with strings, as demonstrated with the extension method above. Creating a `Url` via a string extension is purly optional though; you can create one explicitly if you prefer:\r\n\r\n````C#\r\nvar url = new Url(\"http://www.some-api.com\").AppendPathSegment(...\r\n````\r\n\r\nA `Url` also converts back to a string implicitly, so you can use it directly in any method that takes a string:\r\n\r\n````C#\r\nvar result = await new HttpClient.GetAsync(url);\r\n````\r\n\r\nFlurl also contains the handy `Url.Combine` method, which is basically a [Path.Combine](http://msdn.microsoft.com/en-us/library/dd991142.aspx) for URLs, ensuring one and only one separator character between segments:\r\n\r\n````C#\r\nvar url = Url.Combine(\"http://www.foo.com/\", \"/too/\", \"/many/\", \"/slashes/\", \"too\", \"few\");\r\n// result: \"http://www.foo.com/too/many/slashes/too/few\"\r\n````\r\n\r\n###Encoding\r\n\r\nFlurl takes care of encoding characters in URLs but takes a different approach with path segments than it does with query string values. The assumption is that query string values are highly variable (such as from user input), whereas path segments tend to be more \"fixed\" and may already be encoded, in which case you don't want to double-encode. Here are the rules Flurl follows:\r\n\r\n- Query string values are fully URL-encoded.\r\n- For path segments, *reserved* characters such as `/` and `%` are *not* encoded.\r\n- For path segments, *illegal* characters such as spaces are encoded.\r\n- For path segments, the `?` character is encoded, since query strings get special treatment.\r\n\r\n###Url API\r\n\r\nThe `Url` API is small, discoverable, and fairly self-explanatory. For completeness, here are all public methods and properties:\r\n\r\n````C#\r\n// Static method:\r\n\r\nstatic string Combine(string url, params string[] segments);\r\n\r\n// Instance methods (each with equivalent string extension):\r\n\r\nUrl AppendPathSegment(string segment);\r\nUrl AppendPathSegments(params string[] segments);\r\nUrl AppendPathSegments(IEnumerable<string> segments);\r\nUrl SetQueryParam(string name, object value);\r\nUrl SetQueryParams(object values);\r\nUrl SetQueryParams(IDictionary values);\r\nUrl RemoveQueryParam(string name);\r\nUrl RemoveQueryParams(params string[] names);\r\nUrl RemoveQueryParams(IEnumerable<string> names);\r\n\r\n// Properties:\r\n\r\nstring Path { get; }\r\nIDictionary<string, object> QueryParams { get; }\r\n````\r\n\r\n###Get it on NuGet\r\n\r\n````\r\nPM> Install-Package Flurl\r\n````\r\n\r\n###Credits\r\n\r\nThanks to [Geoffrey Huntley](https://github.com/ghuntley) for providing an intial portable implementation. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}